Make 0 QUIT code for -e
ESCAPE: 1

BUGS:

this only occurs when code.o is used and -e flag:
[drk33@frog Hwk2]$ echo "abcd" | ./encode -e | ./decode
abcd
??[drk33@frog Hwk2]$

	-[1011]0000: trailing 0’s?
	-idk, it’s probably that encode gives too many bytes with -e flag… something to do with flushBits? maybe the final conditional putBits? something with unget?

HAPPENS OFTEN ON SMALLER INPUTS…not larger ones so far
sending total # bits divisible by 8 works. plus code2.o works. so MUST BE SOMETHING TO DO WITH BITS… I’m sending the right codes! 


putchar gives unsigned chars… problem with \0, etc?
	-probably not
TODO:
should give error when decode realizes codes couldn’t have come from encode (or else seg faults abound)




FIXED - double declare bug
[drk33@ladybug Hwk2]$ echo "ababa" | ./encode -e | ./decode
aFINALK = 97
bFINALK = 98
aFINALK = 98 ???????????
bFINALK = 98
aFINALK = 98



bug has to do with putstring not giving proper finalK

a b a b a

1:0
8:97
1:0
8:98
2:1
2:2  
3:1 
3:0 -
8:10

a b a b a \n
finalK = a b a b a \n
next_code = 1 2 3 4 5 6 7
nBits = 1 2 3
last_insert = EMPTY 3 4 5 EMPTY
insert(t, a, 1, 1) (t, b, 2, 1) (C_to_T(1), -2 -> b, 3, 1)
(C_to_T(2), -2 -> a, 4, 1) (C_to_T(1), -2 -> \n, 5, 1)
(t, \n, 6, 1)
putstring(1, )
a b a b a b a b a b a
1 2 1 
zoo: changed to code2.o in Makefile
had decode destroyT


-e flag: check for special codes



what if prune right before KwK?

decode:
X make sure Trie/naps are updated properly
updating nBits
	-problem is that insertions are done AFTER getting the next code
	-maybe insert new code before getting next code
pruning
checking for special codes




encode finished: no mem errors, testing seems to work, but STILL DON’T REALLY KNOW IF PRUNING WORKS, but i’ll start decode


need to update nBits after pruning, etc

root Trie will NOT be placed in ARRAY; every other node will

# NAP == number of appearances only after it’s given a code
# codes printed out == # codes inserted (assuming table isn’t full yet)
# codes printed out <  # codes
BUG: without -e, misses the newline (need to print last char)
BUG: with -e, i print out single-chars twice if next char is also unknown
 	-instead of building on unknown chars, just insert them and 
	


BUG: infinite loop on -e new single chars when codes can’t be assigned


Check if pruning works for -e case

Find natural algorithm for -e case… setting C = (EMPTY, K) might not be optimal.
what if you can’t assign a code to a new single-char?

-e: special codes for new characters
	0 (in however many nBits) special char followed by  8bit
 
initializing table with all 1-char strings?
	set int to 0-255? no

code.c is for sending (encode) and receiving (decode)


why getchar() returns int:
	needs a way to signal special character (e.g. EOF)
—
Questions to ponder:
-new assignment of codes after prunes has to be same in encode (new trie) and decode (new array)
	-use combined array/trie structure

array has pointers to nodes
nodes have codes===indices of array
when adding string to trie, put new pointer in array to that node
pruning trie:
	find root of subtrie that needs to be pruned
	recursively free/set array pointer to NULL
	make new array by putting non-NULL pointers in contiguously
	(if you want to keep the 1-char strings, check trie depth)
——
Compression algo with trie methods:

Trie t = top of the trie

C = t
While ((K = getchar()) != EOF)
	Trie currT = getT(C,K);
	if (currT != NULL && hasCode(currT))
		
		C = currT
	else
		putBit(getCode(C))

nBits = 9, code = *******101010100

clear: code = 0000000[101010100]
nExtra = 9
extraBits = 0000000[101010100]
nExtra = 9-8 = 1
c = 00000000[10101010]
putchar(00000000[10101010])
extraBits = 0000000000000000


nBits = 9, code = *******111111111
code = 0000000111111111
nExtra = 1 + 9 = 10
extraBits = 1010100111111111

